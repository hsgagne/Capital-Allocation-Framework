# -*- coding: utf-8 -*-
"""
Created on Tue Jul  7 12:58:44 2020

@author: hsgag
"""

#Imports
import numpy as np
import pandas as pd
from scipy.stats import norm 
import scipy.stats as stats
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import scipy
import scipy.optimize as optim
from scipy.optimize import root
import math
from parms import calc_sim_params




class Simulation():
    """
    Simulation Class generates random data for various loss distributions
    Number of variables to simulate is determined by the size of the input arrays
    """
    def __init__(self,avg,std,corr,size):
        """
        Initialize simulation, all params must have consistent dimensions
        
        PARAMS:
            avg: array of individual return means
            std: array of std deviations
            corr: correlation matrix
            size: size of the simulation
        """
        #initialize parameters
        self.avg = np.array(avg)
        self.std = np.array(std)
        self.corr = np.array(corr)
        self.size = size
        
        #create normal data used for Vasicek dist
        self.normd = self.get_normal_data()
        
    def get_normal_data(self): #generate multivariate normal data 
        
        var = self.std**2
        var = np.diag(var)
        cov = np.matmul(np.matmul(var,self.corr),var)
        
        r_s = np.random.multivariate_normal(self.avg,cov,self.size)

        returns = pd.DataFrame(r_s, columns = ['Asset %i'%(i+1) for i in range(len(self.avg))])

        return returns    
    
    def get_vasicek_data(self, ts,rhos): #generate vasicek data from normal data
        """
        PARAMS:
            ts: array of asset default threshold
            rhos: array of systematic risk factors
        """
        #get normal data
        norm_data = self.normd
        
        #get the i.c.d.f of the t values
        tts = [norm.ppf(ts[i]) for i in range(len(ts))]
        
        #initialize the result dataframe
        vasi = pd.DataFrame(columns= ['Asset %i'%(i+1) for i in range(len(self.avg))])
        idx = 0
        #for each asset
        for col in vasi.columns:
            #calculate the value of the vasicek r.v.
            vasi[col] = norm.pdf((tts[idx] - norm_data[col] * np.sqrt(rhos[idx])) / np.sqrt(1-rhos[idx]))
            idx +=1
            
        return vasi   
    
    def get_copula_data(self): #generates Gaussian Copula Data
        
        #get covariance matrix from correlation
        var = self.std**2
        var = np.diag(var)
        cov = np.matmul(np.matmul(var,self.corr),var)
        
        #generate correlated normals using cov matrix
        a = stats.multivariate_normal(mean = self.avg, cov = cov)
        
        #create the random variables
        x = a.rvs(self.size)
        
        #convert to a uniform distribution
        norm = stats.norm()
        x_unif = norm.cdf(x)
        
        #new distribution to cast uniform dist to
        m1 = stats.norm()
        m2 = stats.norm()

        #perform the transformation
        x1_trans = m1.ppf(x_unif[:, 0])
        x2_trans = m2.ppf(x_unif[:, 1])
        
        
        x1 = m1.rvs(self.size)
        x2 = m2.rvs(self.size)
        
        #print(np.corrcoef(x1_trans,x2_trans))
        
        h = sns.jointplot(x1_trans, x2_trans, kind='kde', xlim=(-4, 4), ylim=(-4, 4), stat_func=None);
        h.set_axis_labels('x_trans1', 'x_trans2', fontsize=16);
        
        #i = sns.jointplot(x1, x2, kind='kde', xlim=(-4, 4), ylim=(.5, 1), stat_func=None);
        #i.set_axis_labels('x1', 'x2', fontsize=16);
        
        returns = pd.DataFrame(columns = ['Asset 1', 'Asset 2'])
        returns['Asset 1'] = x1_trans
        returns['Asset 2'] = x2_trans
        
        return returns
    
class Risk_Capital():
    
    def __init__(self, returns, conf_level, weight):
        
        self.ret = returns.copy(deep=True)        
        self.conf = conf_level
        self.w = np.array(weight)
        
        if not 'Portfolio' in self.ret.columns:
            self.ret['Portfolio'] = np.dot(self.ret,self.w)
        
    def VaR(self):
                
        v = pd.DataFrame(columns = ['Standalone VaR'], index = ['Asset %i'%(i+1) for i in range(len(self.w))] + ['Portfolio'])

        #calculate VaR for each asset
        for j in range(len(self.w)):
            v.iloc[j] = self.w[j] * np.percentile(self.ret.iloc[:,j],self.conf*100)
        
        #calculate portfolio VaR
        v.loc['Portfolio'] = np.percentile(self.ret['Portfolio'],self.conf*100)
    
        return v
    
    def ES(self):
        
        #calculate VaR
        var = self.VaR()
        n = len(self.ret['Portfolio'])
        
        ttls = [[] for x in self.w]
        port = []
        
        #put returns greater than VaR in an array
        for i in range(n):
            for j in range(len(self.w)):
                if np.float(self.ret.iloc[i,j]) >= (np.float(var.iloc[j])/self.w[j]):
                    ttls[j] += [float(self.ret.iloc[i,j])]

            if np.float(self.ret['Portfolio'].iloc[i]) >= np.float(var.loc["Portfolio"]):
                port += [float(self.ret['Portfolio'].iloc[i])]                
        
        #calculate expected shortfall by taking averages of the arrays
        es = pd.DataFrame(index = ['Asset %i'%(i+1) for i in range(len(self.w))] + ['Portfolio'], columns = ['Standalone ES'])
        for i in range(len(self.w)):
            tmp = np.array(ttls[i])*self.w[i]
            es.iloc[i] = np.mean(tmp)
        es.loc['Portfolio'] = np.mean(port)
        
        return es
        
    
class Allocation(Risk_Capital):
    
    def __init__(self, returns, conf_level, weight):
        
        super().__init__(returns,conf_level,weight)
        
    def Euler_VaR(self): 
        
        #calculate standalone VaRs
        v = Risk_Capital(self.ret,self.conf, self.w).VaR()
        port_var = v.loc['Portfolio']
        avg = self.ret.mean(axis = 0)
        std = self.ret.std(axis = 0)
        covs = [np.cov(self.w[i]*self.ret.iloc[:,i],self.ret['Portfolio'])[0,1] for i in range(len(self.w))]
        
        #caluclate unexpected loss
        ul = float(port_var - avg['Portfolio'])        
        
        #euler allocation by liner approximation Tasche 2008 equation 3.9
        euler = pd.DataFrame(columns = ['VaR Euler Allocation'], index = ['Asset %i'%(i+1) for i in range(len(self.w))])
        for j in range(len(covs)):
            euler.iloc[j] = covs[j] * ul / std['Portfolio']/std['Portfolio'] + (avg[j]*self.w[j])
        
        return euler        
    
    def Euler_ES(self):
        
        #calculate standalone VaRs
        var = Risk_Capital(self.ret,self.conf,self.w).VaR()        
        x = pd.DataFrame(columns = ['Asset %i'%(i+1) for i in range(len(self.w))] + ['Portfolio'])
        
        #euler allocation by Tasche 2008 equation 3.11a
        for i in range(len(self.ret['Portfolio'])):
            
            if np.float(self.ret['Portfolio'].iloc[i]) >= np.float(var.loc['Portfolio']):
                a = pd.DataFrame(self.ret.iloc[i]).T
                x = x.append(a, ignore_index = True) 
        
        es = pd.DataFrame(index = ['Asset %i'%(i+1) for i in range(len(self.w))], columns = ['ES Euler Allocation'])
        for i in range(len(self.w)):
            es.iloc[i] = x.mean(axis=0)[i]*self.w[i]


        return es
    
    def Marginal_VaR(self):
        
        v = Risk_Capital(self.ret,self.conf, self.w).VaR()
        port = float(v.T['Portfolio'])
        n = len(self.w)
        port_vars = []
        for i in range(n):
            data = self.ret.copy(deep = True)
            data = data.drop('Portfolio', 1)            
            data = data.drop('Asset %i'%(i+1), 1)
            w1 = np.delete(self.w, i)
            data['Portfolio'] = np.dot(data,w1)
            rc = Risk_Capital(data,self.conf,w1).VaR()
            port_vars += [float(rc.T['Portfolio'])]
        
        discretes = np.array(port) - np.array(port_vars)
        s = sum(discretes)
        scaled = discretes * port / s
        
        mvar = pd.DataFrame(columns = ['VaR Marginal Allocation'], index = ['Asset %i'%(i+1) for i in range(n)])
        mvar['VaR Marginal Allocation'] = scaled
        
        return mvar
    
    def Marginal_ES(self):

        v = Risk_Capital(self.ret,self.conf, self.w).ES()
        port = float(v.T['Portfolio'])
        n = len(self.w)
        port_vars = []
        for i in range(n):
            data = self.ret.copy(deep = True)
            data = data.drop('Portfolio', 1)            
            data = data.drop('Asset %i'%(i+1), 1)
            w1 = np.delete(self.w, i)
            data['Portfolio'] = np.dot(data,w1)
            rc = Risk_Capital(data,self.conf,w1).VaR()
            port_vars += [float(rc.T['Portfolio'])]
        
        discretes = np.array(port) - np.array(port_vars)
        s = sum(discretes)
        scaled = discretes * port / s
        
        mes = pd.DataFrame(columns = ['ES Marginal Allocation'], index = ['Asset %i'%(i+1) for i in range(n)])
        mes['ES Marginal Allocation'] = scaled
        
        return mes
    
    def Proportional_VaR(self):
        
        v = Risk_Capital(self.ret,self.conf, self.w).VaR()
        d = v.sum() - v.iloc[-1] #sum of all asset VaRs
        n = len(self.w)
        
        #proportional VaR of Asset i = VaR of Asset i / summ of all asset VaRs * portfolio VaR
        pvar = pd.DataFrame(columns = ['VaR Proportional Allocation'], index = ['Asset %i'%(i+1) for i in range(n)])
        for i in range(n):
            pvar.iloc[i] = float(v.iloc[i] / d * v.iloc[-1])
        
        return pvar
    
    def Proportional_ES(self):
        
        v = Risk_Capital(self.ret,self.conf, self.w).ES()
        d = v.sum() - v.iloc[-1] #sum of all asset ESs
        n = len(self.w)
        
        #proportional ES of Asset i = ES of Asset i / summ of all asset ESs * portfolio ES
        pes = pd.DataFrame(columns = ['ES Proportional Allocation'], index = ['Asset %i'%(i+1) for i in range(n)])
        for i in range(n):
            pes.iloc[i] = float(v.iloc[i] / d * v.iloc[-1])
        
        return pes
    
class RORAC(Allocation):
    
    def __init__(self, returns, conf_level,weight):
        super().__init__(returns,conf_level,weight)
        
        
    def VaR(self,allo):

        ''' allo: Euler, Marginal or Proportional
        '''
        u = Risk_Capital(self.ret,self.conf, self.w).VaR()
        avg = self.ret.mean(axis = 0)    
        
        allo = 'Euler'
        
        if allo == 'Euler':
            v = Allocation(self.ret,self.conf, self.w).Euler_VaR()
            #print(v)
        elif allo == 'Marginal':
            v = Allocation(self.ret,self.conf, self.w).Marginal_VaR()
        else:
            v = Allocation(self.ret,self.conf, self.w).Proportional_VaR()
        
        r = pd.DataFrame(columns = ['RORAC'], index = ['Asset %i'%(i+1) for i in range(len(self.w))] + ['Portfolio'])
        for i in range(len(self.w)):
            r.iloc[i] = avg[i]*self.w[i]/float(v.iloc[i])
        r.loc['Portfolio'] = avg.loc['Portfolio'] / float(u.loc['Portfolio'])
        
        return r
    
    def ES(self, allo):
        ''' allo: Euler, Marginal or Proportional
        '''

        u = Risk_Capital(self.ret,self.conf, self.w).ES()
        avg = self.ret.mean(axis = 0)       

        if allo == 'Euler':
            v = Allocation(self.ret,self.conf, self.w).Euler_VaR()
        elif allo == 'Marginal':
            v = Allocation(self.ret,self.conf, self.w).Marginal_VaR()
        else:
            v = Allocation(self.ret,self.conf, self.w).Proportional_VaR()
        
        rorac = pd.DataFrame(columns = ['RORAC'], index = ['Asset %i'%(i+1) for i in range(len(self.w))] + ['Portfolio'])
        for i in range(len(self.w)):
            rorac.iloc[i] = avg[i]*self.w[i]/float(v.iloc[i])
        rorac.loc['Portfolio'] = avg.loc['Portfolio'] / float(u.loc['Portfolio'])
        
        return rorac
    

def weight_deviation_plot(avg,std,corr,size,ts,rhos,alpha,allo,measure,data_type, data=None): #only works for 2 Assets
    '''allo: Euler, Marginal or Proportional
       measure: VaR or ES
       data: normal, vasicek or copula
    '''
    
    weight = np.linspace(.01,.99,10)
    w1 = [[i,1-i] for i in weight]
    
    if data_type == 'normal':
        data = Simulation(avg,std,corr,size).get_normal_data()
    elif data_type == 'vasicek':
        data = Simulation(avg,std,corr,size).get_vasicek_data(ts,rhos)
    elif data_type == 'copula':
        data = Simulation(avg,std,corr,size).get_copula_data()
        
    elif data_type = 'real':
        data = 
        
    x = pd.DataFrame(columns = ['Asset 1', 'Asset 2', 'Portfolio'])
    
    if measure == 'VaR':        
        for i in range(len(w1)): 
            r1 = RORAC(data,alpha,w1[i]).VaR(allo).T
            x = x.append(r1, ignore_index = True)
    
    else:        
        for i in range(len(weight)):    
            r1 = RORAC(data,alpha,w1[i]).ES(allo).T
            x = x.append(r1, ignore_index = True)
   

    plt.figure(figsize=(15,15))    
    plt.plot(weight, x['Asset 1'])
    plt.plot(weight, x['Asset 2'])
    plt.plot(weight, x['Portfolio'])
    plt.xticks(np.arange(0, 1, step=0.05))
    ymin, ymax = plt.ylim()
    plt.yticks(np.arange(ymin, ymax, step=0.02))
    plt.legend(('Asset 1', 'Asset 2', 'Portfolio'))
    plt.ylabel('RORAC')
    plt.xlabel('Weight of Asset 1')
    plt.show()

#functions for optimization
def get_portfolio_RORAC(weight,data,alpha):
        
    r = RORAC(data, alpha, weight)
    ret_val = r.VaR('Euler').loc["Portfolio"].values[0]
    r = None
    return -ret_val

def cons1(x):
    return -sum(x) +1

def opt_RORAC_plot(avg,std,cov_mat,size,num_sim,ts,rhos,alpha,allo,measure,data_type,var_param):
    
    
    
    opt_w = []
    opt_rorac = []
    
    if var_param == 't':
        for t in ts:
            tmp_w = []
            tmp_rorac = []
            
            for i in range(num_sim):
                
                sim = Simulation(avg,std,cov_mat,size)
                data= sim.get_vasicek_data(t,rhos)
                #print(data.head(5))
                res = homegrown_optimizer(data,alpha)
                tmp_w +=[res[0]]
                tmp_rorac +=[-res[1]]
            opt_w += [np.mean(tmp_w)]
            opt_rorac += [np.mean(tmp_rorac)]
            #print(opt_w, opt_rorac)
            
    elif var_param == 'rho':
        for rho in rhos:
            data= sim.get_vasicek_data(ts,rho)
            res = homegrown_optimizer(data,alpha)
            opt_w +=[res[0]]
            opt_rorac +=[-res[1]]
            #print(res[0])
            
            
    plt.plot(opt_w, opt_rorac)
    
    return opt_w, opt_rorac
        

        
    
    
def simple_optimizer(data,alpha):
    
    ws = np.linspace(0,1,250)
    rorac = []
    for w in ws:
        rorac += [get_portfolio_RORAC([w, 1-w],data,alpha)]
    rorac = np.array(rorac)
    mindex = np.argmin(rorac)
    return (ws[mindex],rorac[mindex])
        
        
        
if __name__ == '__main__':
    
    #enter parameters
    avg = [1.5,1.0]
    std = [.64,.48]
    size = 10000
    num_sim = 1
    #weight = [0.2,0.8] 
    cov_mat = [[1,-.4],[-.4,1]]
    alpha = 0.95
    ts1 = [.01,.025]
    ts2 = [.025,.05]
    
    t_var1 = [[x,.025] for x in np.linspace(.001,.05,20)]
    t_var2 = [[.01,x] for x in np.linspace(.005,.1,40)]
    
    
    rhos = [.2,.3]
    rho_var1 = [[.2,x] for x in np.linspace(.15,.5,20)]
    rho_var2 = [[x,.2] for x in np.linspace(.15,.5,20)]


    
    measure = 'VaR'
    allo = 'Euler'
    data_type = 'vasicek'
      
    plot = weight(deviation_plot(avg,std,cov_mat,size,ts1,rhos,alpha,allo,measure, "real")
    
    #opt_w ,opt_rorac = opt_RORAC_plot(avg,std,cov_mat,size,num_sim,t_var2,rhos,alpha,allo,measure,data_type,'t')
    
    #plot = weight_deviation_plot(avg,std,cov_mat,size,ts1,rhos,alpha,allo,measure,data_type)
    
    #plot2 = opt_RORAC_plot(avg,std,cov_mat,size,ts,rhos,alpha,allo,measure,'Vasicek')
    #sim = Simulation(avg,std,cov_mat,size)
    
    
    #data = sim.get_vasicek_data(ts1,rhos)
    #data2 = sim.get_vasicek_data(ts2,rhos)
    
    #w,rorac = simple_optimizer(avg,std,cov_mat,size,ts1,rhos,alpha,allo,measure,data_type)
    #print("opt w",w, "rorac",rorac)
    #plot = weight_deviation_plot(avg,std,cov_mat,size,ts1,rhos,alpha,allo,measure,data_type)
    #optimizer finds weights for maximum RORAC
#    cons = [{'type': 'ineq', 'fun': cons1}]
#    bnds = [(0,1) for i in range(len(avg))]
#    
    
        

    


    
    
    
    

    
